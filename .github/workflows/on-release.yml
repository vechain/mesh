name: Release CI

on:
  release:
    types: [published]

jobs:
  build-and-scan:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate semver tag
        run: |
          TAG="${{ github.event.release.tag_name }}"
          if ! echo "$TAG" | grep -qE '^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "Error: Tag '$TAG' is not a valid semver format"
            echo "Expected format: v1.2.3 or 1.2.3"
            exit 1
          fi
          echo "âœ… Valid semver tag: $TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image (amd64 only)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: mesh-test:${{ github.event.release.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run vulnerability scan and log results
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: mesh-test:${{ github.event.release.tag_name }}
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          vuln-type: os,library
          scanners: misconfig,vuln,secret
          exit-code: '1'
        env:
          # See https://github.com/aquasecurity/trivy/discussions/7538
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2

  build-arch:
    name: Build (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: build-and-scan
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
            cacheRef: buildcache-amd64
          - arch: arm64
            platform: linux/arm64
            runner: docker-build-arm64
            cacheRef: buildcache-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.arch }}
            type=raw,value=latest,suffix=-${{ matrix.arch }},enable={{is_default_branch}}

      - name: Build and push (${{ matrix.arch }})
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-buildcache:${{ matrix.cacheRef }}
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-buildcache:${{ matrix.cacheRef }},mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  publish-manifests:
    name: Publish multi-arch manifests
    runs-on: ubuntu-latest
    needs: [build-arch]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push manifests
        shell: bash
        run: |
          REPO="ghcr.io/${{ github.repository }}"
          VERSION="${{ steps.meta.outputs.version }}"
          mapfile -t TAGS < <(echo "${{ steps.meta.outputs.tags }}")
          ARGS=()
          for t in "${TAGS[@]}"; do
            ARGS+=( -t "$t" )
          done
          docker buildx imagetools create \
            "${ARGS[@]}" \
            "$REPO:${VERSION}-amd64" \
            "$REPO:${VERSION}-arm64"
